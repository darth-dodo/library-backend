"""
Django settings for library_backend project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

# third party imports
import os
import datetime
import logging.config

# django imports
from django.core.exceptions import ImproperlyConfigured
from django.utils.log import DEFAULT_LOGGING


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def convert_str_to_bool_if_bool_str(env_var):
    truthy_list = [True, 'true', 'True', 1, '1']
    falsy_list = [False, 'false', 'False', 0, '0']

    if env_var in truthy_list:
        return True
    elif env_var in falsy_list:
        return False
    else:
        return env_var


def get_env_variable(var_name):
    try:
        env_var = os.environ[var_name]
        return convert_str_to_bool_if_bool_str(env_var)
    except KeyError:
        error_msg = "Set the %s environment variable" % var_name
        raise ImproperlyConfigured(error_msg)


SECRET_KEY = get_env_variable('SECRET_KEY')

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third party apps
    'rest_framework',
    'django_filters',
    'corsheaders',
    'django_extensions',

    # sentry
    # 'raven.contrib.django.raven_compat',
]

PROJECT_APPS = [
    'accounts',
    'library_utils'
]

INSTALLED_APPS += PROJECT_APPS


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # project
    # 'library_utils.error_handlers.LibraryExceptionMiddleware',

]

ROOT_URLCONF = 'library_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'library_backend.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = '/static/'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# sentry configuration for handling uncaught exceptions

# SENTRY_SECRET_KEY = get_env_variable('SENTRY_SECRET_KEY')
# SENTRY_PROJECT_ID = get_env_variable('SENTRY_PROJECT_ID')
# SENTRY_DSN = 'https://{0}@sentry.io/{1}'.format(SENTRY_SECRET_KEY, SENTRY_PROJECT_ID)

# RAVEN_CONFIG = {
#     'dsn': SENTRY_DSN
# }


# Authentication and REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}

# JWT auth and response payload
# JWT_AUTH = {
#     'JWT_RESPONSE_PAYLOAD_HANDLER':
#         'accounts.utils.jwt_utils.jwt_response_payload_handler',
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(days=30),
# }


# logging settings

# Disable Django's logging setup
LOGGING_CONFIG = None

# logs folder location where the file rotated logs are stored
LOG_ROOT = os.path.join(BASE_DIR, '..', 'logs')

# application log level
LOG_LEVEL = get_env_variable('ENV_LOG_LEVEL')

# separate log level for logging in Rotated file
FILE_LOG_LEVEL = get_env_variable('FILE_LOG_LEVEL')

# all logging including and above this level will be reported to Sentry
SENTRY_LOG_LEVEL = get_env_variable('SENTRY_LOG_LEVEL')


# Python logging on sentry, console and in file
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        # console logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },

        # Add Handler for Sentry for `warning` and above
        'sentry': {
            # 'level': SENTRY_LOG_LEVEL,
            # 'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },

        # Adding file rotating log
        'file': {
            'level': FILE_LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': os.path.join(LOG_ROOT, 'django.log'),
            'maxBytes': 50 * 1024 * 1024,  # 50 MB
            'backupCount': 20,
        },

        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # default for all undefined Python modules
        '': {
            'level': 'WARNING',
            'handlers': ['console', 'sentry', 'file'],
        },
        # Application code
        'accounts': {
            'level': LOG_LEVEL,
            'handlers': ['console', 'sentry', 'file'],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        'library_utils': {
            'level': LOG_LEVEL,
            'handlers': ['console', 'sentry', 'file'],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        # # Prevent noisy modules from logging to Sentry
        # 'noisy_module': {
        #     'level': 'ERROR',
        #     'handlers': ['console'],
        #     'propagate': False,
        # },
        # Default runserver request logging
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})


# enable cors
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = (
    'localhost:8000',
    '127.0.0.1:8000',
    '*'
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)
